<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PHP+MySQL乱码问题总结]]></title>
    <url>%2FPHP-MySQL%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[在可视化数据库管理软件创建数据库时，会要求我们选择字符集和排序规则，那么什么是字符集和排序规则，我们又该如何选择呢？ 基本概念 字符（charset）：字符指类字形单位或符号，包括字母、数字、运算符号、标点符号和其他符号，以及一些功能性符号。如‘A’，‘B’ 给定一系列字符，对每个字符赋予一个数值，用该数值来代表对应字符，这一数值就是该字符的编码（Encoding） 从一种二进制编码到某类字符符号的映射叫字符集（Charset set），如{0=&gt;’A’,1=&gt;’B’} 排序规则（也叫校对、字符序）是指在同一字符集内的排序规则（比较规则），确定排序规则后，才能在一个字符集上定义什么是等价的字符，以及字符间的大小关系。 字符集和排序规则之间是一个1对n的关系，一个字符集有多个排序规则， 一个排序规则之对应一个字符集。 选择使用我们可以在数据库中使用SHOW CHARACTER SET 查看目前版本数据库支持的字符集、默认排序规则以及最大长度（这里也可以验证上篇文章说的utf8是最长3字节的字符编码，而utf8mb4最长4字节）。 为了获得更好的兼容，字符集我们一般选择utf8mb4 排序规则名称遵从命名惯例，以字符序对应的字符集名称开头；以_ci(case insensitive表示大小写不敏感)、_cs(case sensitive表示大小写敏感)或_bin(表示以字符串编码的二进制来比较大小)，因此，选择排序规则要考虑的一个问题是，是否以大小写敏感的方式比较字符串，或者是以字符串编码的二进制值来比较大小。大小写敏感和二进制排序规则的不同在于：二进制排序规则直接使用字符的字节进行比较，而大小写敏感的排序规则在多字节字符集时有更复杂的比较规则。 排序规则一般选择utf8mb4默认的utf8mb4_0900_ai_ci 我们选择的这两项分别对应数据库的character_set_database和collation_database这两个变量，实际上，MySQL里还有其他一些关于编码的变量，我们可以通过show variables like &#39;%character%&#39; 查看字符集变量，使用show variables like &#39;%collation%&#39; 查看排序规则变量，在MySQL8.0版本中，字符集和排序规则变量如下： 1show variables like '%character%' --这是在navicat环境下 Variable_name Value character_set_client utf8mb4 character_set_connection utf8mb4 character_set_database utf8 character_set_filesystem binary character_set_results utf8mb4 character_set_server utf8mb4 character_set_system utf8 character_set_client变量是客户端请求数据的编码方式， character_set_connect变量是客户端服务端连接通信使用的编码方式， character_set_database就是我们创建数据库时选择的编码方式，如果创建数据库是没有指定，则根据character_set_server来指定 character_set_filesystem文件系统编码 character_set_results服务端查询结果使用的编码方式 character_set_server数据库服务器的编码方式 character_set_system这是个只读数据，总是utf8 其中，character_set_client、character_set_connection、character_set_results在每次客户端连接服务器时，都会根据客户端的要求来改变，如在navicat中默认是utf8mb4，如果使用cmd连接MySQL执行上面的命令，那么这几个变量的值应该是gbk（如果没有调整的话）。当然我们也可以自己指定以我们要求的编码方式连接数据库 1mysql -u root -p pw --default-character-set=latin1 指定以latin1编码连接数据库，那么这三个值就是latin1，也可以再登陆后使用set names utf8来改变。 在客户端与数据库交互时，他们可能使用不同的字符集，这时服务端会进行必要的翻译和转换工作，首先服务端总是假设客户端是按照character_set_client设置的字符集来发送数据和SQL语句的，当服务器接收到客户端的数据时，先将其转换成character_set_connection，然后处理sql语句，产生的结果从character_set_connection转换成character_set_results，然后发回客户端。所以最基本的一点是要保证三个字符集是兼容的，这样才能避免通信时出现问题。如果三者不兼容，可能会出现错误甚至是安全问题。 你以为这样就能解决乱码问题了？ 为什么会出现乱码呢？ 这里我们根据乱码出现的位置分为几种情况： 往数据库存数据乱码 数据库数据正常，显示乱码 对于第一种情况，往往是数据库选择的字符集不支持存入的数据。如character_set_database是latin1,而存入的数据是汉字，那么自然会乱码。 第二种情况可能是character_set_connection和character_set_results不兼容导致的，当然最基本的，如果整个网页都乱码的话，可能是php文件编码和设置的meta charset不兼容导致的。 所以在确保character_set_database支持的情况下，在PHP环境中，连接完数据库之后，使用mysql-&gt;set_charset(’utf8mb4‘)函数指定三个字符集为utf8mb4（PHP手册中不推荐使用mysql-&gt;query(“set names utf8”)方法），这样就保证了连接通信正确，基本就不会出现乱码了。 参考： http://ourmysql.com/archives/314 https://www.cnblogs.com/digdeep/p/5228199.html 高性能MySQL（第3版）]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>编码</tag>
        <tag>MySQL</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL中的utf8和utf8mb4]]></title>
    <url>%2FMySql%E4%B8%AD%E7%9A%84utf8%E5%92%8Cutf8mb4.html</url>
    <content type="text"><![CDATA[MySQL中utf8和utf8mb4开始之前先回顾一下UTF-8和Unicode的概念 UTF-8？ 来自百度百科的定义 UTF-8（8位元，Universal Character Set/Unicode Transformation Format）是针对Unicode的一种可变长度字符编码。它可以用来表示Unicode标准中的任何字符，而且其编码中的第一个字节仍与ASCII相容，使得原来处理ASCII字符的软件无须或只进行少部份修改后，便可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。 那么什么是Unicode呢？ Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。 通俗点讲：早期针对英语设计的ASCII码并不能支持其他语言，各国为了把各自的语言文字输入进计算机来处理，制定了自己的编码规范（如中国的gb2312），而这就导致了同样的数据通过不同的编码打开时的乱码问题。而为了统一所有的语言文字，Unicode应运而生，他把所有的语言统一到一套编码里，解决了乱码的问题，UTF-8是Unicode的一种字符集转换格式（Unicode Transformation Format），也就是怎么将Unicode定义的数字转换成程序数据。UTF-8即以8位也就是一个字节为单位对Unicode进行编码，是Unicode的一种实现方式，除了 UTF-8，还有UTF-16，UTF-32 等都可以实现 Unicode，但是 UTF-8 相对而言是用的最为广泛的。 UTF-8编码的特点是对不同范围的字符使用不同长度的编码，如英文字符“A”只需要8位，则用一个字节，汉字多用三个字节，而极少使用的语言字符则使用4字节编码。每个字符最多用4个字节来编码，这样做就节省空间。 在MySQL中，utf8字符集最大字符长度为3字节，如果遇到4字节的宽字符就会出现插入异常的情况，像emoji表情和很多不常用的汉字都无法使用MySQL的utf8字符集，为了弥补这个缺陷，MySQL在5.5.3版本增加了utf8mb4字符集，mb4就是most byte 4，专门用来兼容4字节的Unicode。也就是说：在MySQL中utf8mb4才是真正的UTF-8，是utf8的超集。 要在MySQL中使用4字节长度的UTF-8字符，需要使用utf8mb4字符集，但只有5.5.3版本之后才支持，为了获得更好的兼容，最好使用utf8mb4而不是utf8，对于char类型数据来说，utf8mb4会多消耗一些空间（每个字符多占用一个字节），MySQL官方建议，可以使用varchar来替代char 参考资料： http://ourmysql.com/archives/1402]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>编码</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP学习笔记]]></title>
    <url>%2FPHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[php是弱类型语言，不需生命变量类型 变量名只能包含字母数字下划线，并且以字母和下划线开头，变量名区分大小写，$this 是一个特殊的变量，不能被赋值。变量名可以用中文。 php定义的全局变量在函数内使用时需要加global，在c语言中全局变量可以直接使用而不需要global。 print和echo echo可以输出一个或多个字符串，无返回值，速度比print慢 print只允许输出一个字符串，有返回值1 php从html中分离： 凡是在一对开始和结束标记之外的内容都会被 PHP 解析器忽略，这使得 PHP 文件可以具备混合内容。 可以使 PHP 嵌入到 HTML 文档中去，如下例所示。php可以放在文档的任意位置。 php文件里面可以放html、css、js等前端语言， 使用条件的高级分离术 12345&lt;?php if ($expression == true): ?&gt; This will show if the expression is true.&lt;?php else: ?&gt; Otherwise this will show.&lt;?php endif; ?&gt; 要输出大段文本时，跳出 PHP 解析模式通常比将文本通过 echo或 print输出更有效率。 PHP是最好的语言。 2019软件工程师现状报告显示：开发者最爱Python，最讨厌PHP PHP的九种数据类型 ​ 四种标量类型 boolean（布尔） 以下值转换成布尔型时被认为是false 布尔值false本身 整型、浮点型、字符串零 空字符串 空数组 NULL 负数？字符串“false”？ integer（整型） float（浮点型） 永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。0.1+0.2 ==≠== 0.3 string（字符型） 单引号与双引号区别：双引号会解析特殊字符以及变量，而单引号不会。 拼接符（并置运算符） 将变量$message中的数据更新到id为$id的位置，下列语句能够执行正确的是： $sql = “update message set message = $message where id = $id;”; × $sql = “update message set message = ‘$message’ where id = $id;”; √ $sql = ‘update message set message = ‘.$message.’where id = ‘.$id.’;’; 三种复合类型 array（数组） object（对象） callable（可调用） 两种特殊类型 resource（资源） NULL（无类型） PHP运算符 注释 单行注释仅仅注释到行末或者当前的 PHP 代码块，视乎哪个首先出现。这意味着在 // … ?&gt; 或者 # … ?&gt; 之后的 HTML 代码将被显示出来：?&gt; 跳出了 PHP 模式并返回了 HTML 模式 PHP是现在使用的最广泛的开源脚本语言，零成本，word press就是用php写的一个框架， 兼容几乎所有服务器，apache，iis都可以运行php页面，支持多种数据库，MySQL，Oracle、SQL server、mongobd···容几乎所有服务器 PHP+MySQL常用语句 PHP表单 $_GET和$_POST区别： $_GET传递的数据会显示在url中，可以收藏，能被缓存，传输类型只允许ASCII字符，不安全，数据长度有限制（URL长度最大是2048个字符） $_POST相对安全，数据长度无限制。通过request body传递参数 表单处理 post 和get的区别，$_GET 和 $_POST超全局变量，访问不需要考虑作用域，可以从任何函数文件访问， 表单验证 表单必填 正则表达式 cookie和session前后端验证登录注册模块总结 注册时，注册信息通过前端验证后通过post请求发送到数据库。 服务器再次校验数据是否规范、符合标准。 服务器将用户信息存储到数据库后，告知浏览器注册成功 用户打开登录界面，输入登录信息，向服务器发送post请求 服务器读取本地数据库，比对登录信息是否正确，若错误，告知浏览器登录失败；若正确给浏览器设置cookie 浏览器向服务器发送get请求，访问首页，附上cookie 服务器读取cookie，验证身份后，同意浏览器访问首页 作者：tinaawang 链接：https://www.jianshu.com/p/9a728123fa73 来源：简书 简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。 test PHP 安全 xss 分页分页的两种实现方法 12345 $offset = 10*$page;select * from message limit 10 offset $offset;select * from message limit(10,$offset); 1mysqli_data_seek($res,$offset); include和require​ require 和 include 几乎完全一样，除了处理失败的方式不同之外。require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止而 include只产生警告（E_WARNING），脚本会继续运行。 ​ 如果文件被包含两次，PHP 5 发出致命错误因为函数已经被定义。 ​ 推荐使用include_once 而不是检查文件是否已包含并在包含文件中有条件返回。 require_once 语句和 require语句完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含。 类和对象 类的定义以关键字class开头，后面跟着类型，后面跟着或括号，里面包含类的属性和方法的定义。 类名同样只能包含字母数字下划线，并且以字母或下划线开头。 一个类可以有自己的常量、变量（属性）和函数（方法）。 创建类的实例使用new关键字 new className(); includes 一个类可以在声明中用extends继承另一个类的方法和属性，PHP不支持多重继承，一个类只能继承一个基类。 被继承的方法和属性可以通过用同样的名字覆盖，但是如果父类方法时用了final，则该方法不可覆盖。可以通过parent:: 来访问被覆盖的方法和属性。 覆盖方法时，参数必须保持一致，否则PHP将发出E_STRCT级别的错误。但构造函数例外，构造函数可以在覆盖时使用不同的参数。 ::class关键字可以用于类名的解析，使用ClassName::class可以获取一个字符串，包含了ClassName的完全限定名称，这对使用了命名空间的类尤其重要。 属性 类的变量成员叫做属性，或者叫字段、特征。 声明属性由关键字public、private、protected开头，然后跟一个普通的变量声明来组成。 在类的成员方法里面，可以用 -&gt;（对象运算符）：$this-&gt;property（其中 property 是该属性名）这种方式来访问非静态属性。静态属性则是用 ::（双冒号）：self::$property来访问。 类常量 把类中保持不变的值定义为类常量，在定义和使用常量的时候不需要$; 访问控制 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。被定义为公有的类成员可以在任何地方被访问。被定义为受保护的类成员则可以被其自身以及其子类和父类访问。被定义为私有的类成员则只能被其定义所在的类访问。 范围解析操作符 一对冒号，可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。 重载 PHP提供的重载是指动态的创建类属性和方法。通过魔术方法实现。 遍历对象 foreach语句，默认情况下，所有可见属性都将被用于便利。（foreach便利所有其能够访问的可见属性）。 魔术方法 PHP将所有以__（两个下划线）开头的类方法保留为魔术方法，所以在定义类方法时，除了上述魔术方法，不要以 __为前缀。 final关键字 PHP5新增，如果父类的方法被声明为final，则子类无法覆盖该方法，如果一个类被声明为final，则该类不能被继承。 属性不能被定义为final，只有类和方法才能被定义为final。 对象比较 当使用比较运算符（==）比较两个对象变量时，比较的原则是：如果两个对象的属性和属性值都相等，并且两个对象是同一个类的实例，那么这两个对象相等。 如果使用全等运算符（===）比较，这两个对象一定要指向某一个类的同一实例。 类型约束 抽象类 定义为抽象的类不能被实例化。 任何一个类，如果它里面至少有一个方法被声明为抽象的，则它必须定义为抽象类 继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。此外方法的调用方式必须匹配，即类型和所需参数数量必须一致。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则两者的声明并无冲突。 这也适用于 PHP 5.4 起的构造函数。在 PHP 5.4 之前的构造函数声明可以不一样的。 命名空间 在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题： 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。 PHP 命名空间提供了一种将相关的类、函数和常量组合到一起的途径。 虽然任意合法的PHP代码都可以包含在命名空间中，但只有以下类型的代码受命名空间的影响，它们是：类（包括抽象类和traits）、接口、函数和常量。 命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间，除了一个以外：declare关键字。所有非PHP代码包括空白符都不能出现在命名空间之前 GET和POST网页乱码mysqli_query(“set names utf8”); 指定客户端将用于将SQL语句发送到服务器的字符集。告诉服务器以后从客户端传来的信息是utf-8编码的，指定服务器用于将结果返回客户端的字符集。 mysqli_set_charset($con,’utf8’);这应该是首选的用于改变字符编码的方法，不建议使用mysqli_query()执行SQL请求的SET NAMES …（如 SET NAMES utf8） ::和-&gt;区别:: 访问静态方法或类常量 -&gt;访问非静态]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
