<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Quartus II安装破解及基础操作]]></title>
    <url>%2F2019%2F06%2F03%2FQuartus-II%E5%AE%89%E8%A3%85%E7%A0%B4%E8%A7%A3%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[Quartus II安装破解及基础操作安装了hexo之后第一篇博客本来是python爬虫的，结果在问题复现的时候自己的ip被封了，途中也发现有其他的方法，所以耽误了一段时间，才写了一半，争取尽快写完发出来。 第一次写博客，感觉肚子里没点墨水还真是不行，那就从小的知识开始写吧 为了能够在周四给老师交作业的时候不忘记步骤掉链子，以及方便以后用的时候再看，这次就先是今天Quartus使用的简单记录。 安装破解 安装 安装包以及破解要使用的工具已经放[某云盘](链接: https://pan.baidu.com/s/1Un_7PJ8mWCU9o5GOtCJf9w 提取码: 5v0x)了，自行取用。 安装很简单，打开安装程序，除中间可自行选择安装路径(安装路径后面用的到)外，其余一路next下来就好，就不再多说。 破解在破解器压缩包里，提供了32位和64位电脑用到的破解软件，这里以64位为例。解压然后将其中的可执行文件复制到 安装路径下\quartus\bin64 例如我的在E:\altera\13.0sp1\quartus\bin64 文件位置不对的话会出现这样一个提示 OK现在要关掉电脑的杀毒软件，否则的话会被当成病毒清理掉，打开破解程序，点击应用，保存license.dat文件退出即可 打开安装好的Quartus，选择第二项 Tools-&gt;license setup 在下面network Interface····复制第一个(第一个逗号之前的)出来，用sublime打开刚才的license文件，替换下图中的XXX 保存关闭重启，破解就完成了。破解之后在刚才的license setup中我们看到,可以用的2035年嘻嘻嘻。 破解就结束了。 其实很多带有试用期的软件像PHP storm这种还有一个更加简单的破解方法。那就是在打开软件选在30天适用之前修改系统时间，然后再选择适用，那么试用期就会到你定的时候开始适用一段时间。 例如我们选择试用期之前把系统时间改成2099.1.1，那么三十天试用期的截至时间就是2099.2.1 嘿嘿嘿···· 使用 原件建模及连接这次作业做的是累加器（计数器？）+ALU，累加器从0-15，输出结果连到ALU的S端。 第一个问题就是怎么把两个模块连起来呢？ 不绕圈子了·····字实在太多了，现在已经半夜12点了····· 在项目中新建一个Verilog HDL file 写出原件对应的代码，如一个简单的累加器代码如下 代码写完点击Processing下面的Analysis Current File，成功之后在左边的文档树中找到这个文件右键选择倒数第二个 这样一个原件就出来了，找到ALU的bdf文件打开，在空白处双击，在project下选择元件的模块名称，ok放到对应位置即可。这样两个元件就联系起来了。 仿真电路图连接好之后就需要仿真，首先得编译，选择processing下面的start compilation或者上面的符号开始编译。 等待编译成功后新建一个vwf file,在左侧空白处双击， 然后选择cp，做一下调整 其他input也可自行调整，最后点击simulation，选择option，选第二个，ok，再一次，选下面一个就ok了 最后效果如下 啊啊啊啊啊终于写完了 好累啊，排版好丑·····慢慢来吧 路漫漫其修远兮，吾将上下而求索]]></content>
      <categories>
        <category>Quartus</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Quartus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信公众号爬虫之旅]]></title>
    <url>%2F2019%2F06%2F02%2F%E5%85%AC%E4%BC%97%E5%8F%B7%E7%88%AC%E8%99%AB%E4%B9%8B%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[微信公众号爬虫之旅上次手机没电关机，再次开机发现，微信竟然背着我更新了，看到新版本微信公众号，我懵逼了，这···这也太不友好了吧几天过去错过好多公众号的优质好文，我记得python号称除了不能生孩子之外啥都能干，但是没学过爬虫怎么办？没关系，作为程序员不能服输，干就完了！于是凭借着我看过的几篇爬虫文章开启了微信公众号爬虫之旅 平台：搜狗微信工具：sublime分析首先，浏览一遍搜狗微信搜索文章的过程 输入要搜索的公众号名字，点击搜公众号，跳转到url https://weixin.sogou.com/weixin?type=2&amp;s_from=input&amp;query=路人甲TM&amp;ie=utf8&amp;_sug_=n&amp;_sug_type_= 分析一下这个url的参数，type值为1表示是搜索公众号，值为2表示搜索文章，s_from 固定input，query的值即我们要搜索的公众号，后面一串也是不用变的。 点击对应公众号的连接 新窗口展示出了该公众号的最近十条群发 这个过程结束大体思路已经有了，request直接请求上面的url，将其中的query换成我们想爬的公众号名字]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP学习笔记]]></title>
    <url>%2F2019%2F05%2F29%2FPHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[php是弱类型语言，不需生命变量类型 变量名只能包含字母数字下划线，并且以字母和下划线开头，变量名区分大小写，$this 是一个特殊的变量，不能被赋值。变量名可以用中文。 php定义的全局变量在函数内使用时需要加global，在c语言中全局变量可以直接使用而不需要global。 print和echo echo可以输出一个或多个字符串，无返回值，速度比print慢 print只允许输出一个字符串，有返回值1 php从html中分离： 凡是在一对开始和结束标记之外的内容都会被 PHP 解析器忽略，这使得 PHP 文件可以具备混合内容。 可以使 PHP 嵌入到 HTML 文档中去，如下例所示。php可以放在文档的任意位置。 php文件里面可以放html、css、js等前端语言， 使用条件的高级分离术 12345&lt;?php if ($expression == true): ?&gt; This will show if the expression is true.&lt;?php else: ?&gt; Otherwise this will show.&lt;?php endif; ?&gt; 要输出大段文本时，跳出 PHP 解析模式通常比将文本通过 echo或 print输出更有效率。 PHP是最好的语言。 2019软件工程师现状报告显示：开发者最爱Python，最讨厌PHP PHP的九种数据类型 ​ 四种标量类型 boolean（布尔） 以下值转换成布尔型时被认为是false 布尔值false本身 整型、浮点型、字符串零 空字符串 空数组 NULL 负数？字符串“false”？ integer（整型） float（浮点型） 永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。0.1+0.2 ==≠== 0.3 string（字符型） 单引号与双引号区别：双引号会解析特殊字符以及变量，而单引号不会。 拼接符（并置运算符） 将变量$message中的数据更新到id为$id的位置，下列语句能够执行正确的是： $sql = “update message set message = $message where id = $id;”; × $sql = “update message set message = ‘$message’ where id = $id;”; √ $sql = ‘update message set message = ‘.$message.’where id = ‘.$id.’;’; 三种复合类型 array（数组） object（对象） callable（可调用） 两种特殊类型 resource（资源） NULL（无类型） PHP运算符 注释 单行注释仅仅注释到行末或者当前的 PHP 代码块，视乎哪个首先出现。这意味着在 // … ?&gt; 或者 # … ?&gt; 之后的 HTML 代码将被显示出来：?&gt; 跳出了 PHP 模式并返回了 HTML 模式 PHP是现在使用的最广泛的开源脚本语言，零成本，word press就是用php写的一个框架， 兼容几乎所有服务器，apache，iis都可以运行php页面，支持多种数据库，MySQL，Oracle、SQL server、mongobd···容几乎所有服务器 PHP+MySQL常用语句 PHP表单 $_GET和$_POST区别： $_GET传递的数据会显示在url中，可以收藏，能被缓存，传输类型只允许ASCII字符，不安全，数据长度有限制（URL长度最大是2048个字符） $_POST相对安全，数据长度无限制。通过request body传递参数 表单处理 post 和get的区别，$_GET 和 $_POST超全局变量，访问不需要考虑作用域，可以从任何函数文件访问， 表单验证 表单必填 正则表达式 cookie和session前后端验证登录注册模块总结 注册时，注册信息通过前端验证后通过post请求发送到数据库。 服务器再次校验数据是否规范、符合标准。 服务器将用户信息存储到数据库后，告知浏览器注册成功 用户打开登录界面，输入登录信息，向服务器发送post请求 服务器读取本地数据库，比对登录信息是否正确，若错误，告知浏览器登录失败；若正确给浏览器设置cookie 浏览器向服务器发送get请求，访问首页，附上cookie 服务器读取cookie，验证身份后，同意浏览器访问首页 作者：tinaawang 链接：https://www.jianshu.com/p/9a728123fa73 来源：简书 简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。 test PHP 安全 xss 分页分页的两种实现方法 12345 $offset = 10*$page;select * from message limit 10 offset $offset;select * from message limit(10,$offset); 1mysqli_data_seek($res,$offset); include和require​ require 和 include 几乎完全一样，除了处理失败的方式不同之外。require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止而 include只产生警告（E_WARNING），脚本会继续运行。 ​ 如果文件被包含两次，PHP 5 发出致命错误因为函数已经被定义。 ​ 推荐使用include_once 而不是检查文件是否已包含并在包含文件中有条件返回。 require_once 语句和 require语句完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含。 类和对象 类的定义以关键字class开头，后面跟着类型，后面跟着或括号，里面包含类的属性和方法的定义。 类名同样只能包含字母数字下划线，并且以字母或下划线开头。 一个类可以有自己的常量、变量（属性）和函数（方法）。 创建类的实例使用new关键字 new className(); includes 一个类可以在声明中用extends继承另一个类的方法和属性，PHP不支持多重继承，一个类只能继承一个基类。 被继承的方法和属性可以通过用同样的名字覆盖，但是如果父类方法时用了final，则该方法不可覆盖。可以通过parent:: 来访问被覆盖的方法和属性。 覆盖方法时，参数必须保持一致，否则PHP将发出E_STRCT级别的错误。但构造函数例外，构造函数可以在覆盖时使用不同的参数。 ::class关键字可以用于类名的解析，使用ClassName::class可以获取一个字符串，包含了ClassName的完全限定名称，这对使用了命名空间的类尤其重要。 属性 类的变量成员叫做属性，或者叫字段、特征。 声明属性由关键字public、private、protected开头，然后跟一个普通的变量声明来组成。 在类的成员方法里面，可以用 -&gt;（对象运算符）：$this-&gt;property（其中 property 是该属性名）这种方式来访问非静态属性。静态属性则是用 ::（双冒号）：self::$property来访问。 类常量 把类中保持不变的值定义为类常量，在定义和使用常量的时候不需要$; 访问控制 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。被定义为公有的类成员可以在任何地方被访问。被定义为受保护的类成员则可以被其自身以及其子类和父类访问。被定义为私有的类成员则只能被其定义所在的类访问。 范围解析操作符 一对冒号，可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。 重载 PHP提供的重载是指动态的创建类属性和方法。通过魔术方法实现。 遍历对象 foreach语句，默认情况下，所有可见属性都将被用于便利。（foreach便利所有其能够访问的可见属性）。 魔术方法 PHP将所有以__（两个下划线）开头的类方法保留为魔术方法，所以在定义类方法时，除了上述魔术方法，不要以 __为前缀。 final关键字 PHP5新增，如果父类的方法被声明为final，则子类无法覆盖该方法，如果一个类被声明为final，则该类不能被继承。 属性不能被定义为final，只有类和方法才能被定义为final。 对象比较 当使用比较运算符（==）比较两个对象变量时，比较的原则是：如果两个对象的属性和属性值都相等，并且两个对象是同一个类的实例，那么这两个对象相等。 如果使用全等运算符（===）比较，这两个对象一定要指向某一个类的同一实例。 类型约束 抽象类 定义为抽象的类不能被实例化。 任何一个类，如果它里面至少有一个方法被声明为抽象的，则它必须定义为抽象类 继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。此外方法的调用方式必须匹配，即类型和所需参数数量必须一致。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则两者的声明并无冲突。 这也适用于 PHP 5.4 起的构造函数。在 PHP 5.4 之前的构造函数声明可以不一样的。 命名空间 在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题： 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。 PHP 命名空间提供了一种将相关的类、函数和常量组合到一起的途径。 虽然任意合法的PHP代码都可以包含在命名空间中，但只有以下类型的代码受命名空间的影响，它们是：类（包括抽象类和traits）、接口、函数和常量。 命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间，除了一个以外：declare关键字。所有非PHP代码包括空白符都不能出现在命名空间之前 GET和POST网页乱码mysqli_query(“set names utf8”); 指定客户端将用于将SQL语句发送到服务器的字符集。告诉服务器以后从客户端传来的信息是utf-8编码的，指定服务器用于将结果返回客户端的字符集。 mysqli_set_charset($con,’utf8’);这应该是首选的用于改变字符编码的方法，不建议使用mysqli_query()执行SQL请求的SET NAMES …（如 SET NAMES utf8） ::和-&gt;区别:: 访问静态方法或类常量 -&gt;访问非静态]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
